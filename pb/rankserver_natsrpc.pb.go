// Code generated by protoc-gen-go-natsrpc DO NOT EDIT.
// versions:
// protoc-gen-go-natsrpc v2.2.2

package pb

import (
	bytes "bytes"
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	async "github.com/liuwangchen/toy/pkg/async"
	middleware "github.com/liuwangchen/toy/transport/middleware"
	natsrpc "github.com/liuwangchen/toy/transport/rpc/natsrpc"
	template "text/template"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goctopus package it is being compiled against.
var _ = new(context.Context)
var _ = new(bytes.Buffer)
var _ = new(template.FuncMap)
var _ = middleware.Chain()
var _ = new(empty.Empty)
var _ = new(async.Async)

const _ = natsrpc.SupportPackageIsVersion1
const _ = proto.ProtoPackageIsVersion3

// RankServerNatsService  service interface
type RankServerNatsService interface {
	// Echo call
	Echo(ctx context.Context, req *ReqEcho) (*RespEcho, error)
}

// RegisterRankServer register RankServer service
func RegisterRankServerNatsServer(conn *natsrpc.ServerConn, s RankServerNatsService, opts ...natsrpc.ServiceOption) error {
	return conn.Register("github.com.liuwangchen.apis.pb.RankServer", s, opts...)
}

// RankServerNatsClient
type RankServerNatsClient interface {
	// Echo
	Echo(ctx context.Context, req *ReqEcho) (*RespEcho, error)
}

type _RankServerNatsClient struct {
	c *natsrpc.Client
}

// NewRankServerNatsClient
func NewRankServerNatsClient(conn *natsrpc.ClientConn, opts ...natsrpc.ClientOption) RankServerNatsClient {
	ret := &_RankServerNatsClient{
		c: natsrpc.NewClient(conn, opts...),
	}
	return ret
}
func (c *_RankServerNatsClient) Echo(ctx context.Context, req *ReqEcho) (*RespEcho, error) {
	rep := &RespEcho{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.pb.RankServer", "Echo", req, rep)
	return rep, err
}

// Async
// RankServerAsyncNatsClient
type RankServerAsyncNatsClient interface {
	// Echo
	Echo(ctx context.Context, req *ReqEcho, cb func(*RespEcho, error))
	SyncClient() RankServerNatsClient
}

type _RankServerAsyncNatsClient struct {
	c  RankServerNatsClient
	as async.IAsync
}

// NewRankServerAsyncNatsClient
func NewRankServerAsyncNatsClient(conn *natsrpc.ClientConn, as async.IAsync, opts ...natsrpc.ClientOption) RankServerAsyncNatsClient {
	ret := &_RankServerAsyncNatsClient{
		c:  NewRankServerNatsClient(conn, opts...),
		as: as,
	}
	return ret
}

func (c *_RankServerAsyncNatsClient) SyncClient() RankServerNatsClient {
	return c.c
}
func (c *_RankServerAsyncNatsClient) Echo(ctx context.Context, req *ReqEcho, cb func(*RespEcho, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.Echo(ctx, reqClone.(*ReqEcho))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}

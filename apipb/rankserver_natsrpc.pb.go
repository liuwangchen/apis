// Code generated by protoc-gen-go-natsrpc DO NOT EDIT.
// versions:
// protoc-gen-go-natsrpc v2.2.2

package apipb

import (
	bytes "bytes"
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	async "github.com/liuwangchen/toy/pkg/async"
	middleware "github.com/liuwangchen/toy/transport/middleware"
	natsrpc "github.com/liuwangchen/toy/transport/rpc/natsrpc"
	template "text/template"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goctopus package it is being compiled against.
var _ = new(context.Context)
var _ = new(bytes.Buffer)
var _ = new(template.FuncMap)
var _ = middleware.Chain()
var _ = new(empty.Empty)
var _ = new(async.Async)

const _ = natsrpc.SupportPackageIsVersion1
const _ = proto.ProtoPackageIsVersion3

// RankServerNatsService  service interface
type RankServerNatsService interface {
	// GetRank call
	GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error)
	// GetRankByOffset call
	GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error)
	// UpdateRank call
	UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error)
	// DeleteRankMems call
	DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
	// DeleteRank call
	DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
}

func RegisterAsyncRankServerNatsServer(conn *natsrpc.ServerConn, as async.IAsync, s RankServerNatsService, opts ...natsrpc.ServiceOption) error {
	ss := &RankServerNatsServiceWrapper{
		as: as,
		s:  s,
	}
	return conn.Register("github.com.liuwangchen.apis.apipb.RankServer", ss, opts...)
}

// RankServerNatsServiceWrapper DO NOT USE
type RankServerNatsServiceWrapper struct {
	as async.IAsync
	s  RankServerNatsService
}

// GetRank DO NOT USE
func (s *RankServerNatsServiceWrapper) GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error) {
	temp, err := s.as.Do(ctx, func() (interface{}, error) {
		return s.s.GetRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*RspGetRank), err
}

// GetRankByOffset DO NOT USE
func (s *RankServerNatsServiceWrapper) GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error) {
	temp, err := s.as.Do(ctx, func() (interface{}, error) {
		return s.s.GetRankByOffset(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*RspGetRank), err
}

// UpdateRank DO NOT USE
func (s *RankServerNatsServiceWrapper) UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error) {
	temp, err := s.as.Do(ctx, func() (interface{}, error) {
		return s.s.UpdateRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

// DeleteRankMems DO NOT USE
func (s *RankServerNatsServiceWrapper) DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	temp, err := s.as.Do(ctx, func() (interface{}, error) {
		return s.s.DeleteRankMems(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

// DeleteRank DO NOT USE
func (s *RankServerNatsServiceWrapper) DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	temp, err := s.as.Do(ctx, func() (interface{}, error) {
		return s.s.DeleteRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

// RankServerNatsClient
type RankServerNatsClient interface {
	// GetRank
	GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error)
	// GetRankByOffset
	GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error)
	// UpdateRank
	UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error)
	// DeleteRankMems
	DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
	// DeleteRank
	DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
}

type _RankServerNatsClient struct {
	c *natsrpc.Client
}

// NewRankServerNatsClient
func NewRankServerNatsClient(conn *natsrpc.ClientConn, opts ...natsrpc.ClientOption) RankServerNatsClient {
	ret := &_RankServerNatsClient{
		c: natsrpc.NewClient(conn, opts...),
	}
	return ret
}
func (c *_RankServerNatsClient) GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error) {
	rep := &RspGetRank{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.apipb.RankServer", "GetRank", req, rep)
	return rep, err
}
func (c *_RankServerNatsClient) GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error) {
	rep := &RspGetRank{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.apipb.RankServer", "GetRankByOffset", req, rep)
	return rep, err
}
func (c *_RankServerNatsClient) UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error) {
	rep := &CommonRsp{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.apipb.RankServer", "UpdateRank", req, rep)
	return rep, err
}
func (c *_RankServerNatsClient) DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	rep := &CommonRsp{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.apipb.RankServer", "DeleteRankMems", req, rep)
	return rep, err
}
func (c *_RankServerNatsClient) DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	rep := &CommonRsp{}
	err := c.c.Request(ctx, "github.com.liuwangchen.apis.apipb.RankServer", "DeleteRank", req, rep)
	return rep, err
}

// Async
// RankServerAsyncNatsClient
type RankServerAsyncNatsClient interface {
	// GetRank
	GetRank(ctx context.Context, req *ReqGetRank, cb func(*RspGetRank, error))
	// GetRankByOffset
	GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset, cb func(*RspGetRank, error))
	// UpdateRank
	UpdateRank(ctx context.Context, req *ReqUpdateRank, cb func(*CommonRsp, error))
	// DeleteRankMems
	DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems, cb func(*CommonRsp, error))
	// DeleteRank
	DeleteRank(ctx context.Context, req *ReqDeleteRankMems, cb func(*CommonRsp, error))
	SyncClient() RankServerNatsClient
}

type _RankServerAsyncNatsClient struct {
	c  RankServerNatsClient
	as async.IAsync
}

// NewRankServerAsyncNatsClient
func NewRankServerAsyncNatsClient(conn *natsrpc.ClientConn, as async.IAsync, opts ...natsrpc.ClientOption) RankServerAsyncNatsClient {
	ret := &_RankServerAsyncNatsClient{
		c:  NewRankServerNatsClient(conn, opts...),
		as: as,
	}
	return ret
}

func (c *_RankServerAsyncNatsClient) SyncClient() RankServerNatsClient {
	return c.c
}
func (c *_RankServerAsyncNatsClient) GetRank(ctx context.Context, req *ReqGetRank, cb func(*RspGetRank, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.GetRank(ctx, reqClone.(*ReqGetRank))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}
func (c *_RankServerAsyncNatsClient) GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset, cb func(*RspGetRank, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.GetRankByOffset(ctx, reqClone.(*ReqGetRankByOffset))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}
func (c *_RankServerAsyncNatsClient) UpdateRank(ctx context.Context, req *ReqUpdateRank, cb func(*CommonRsp, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.UpdateRank(ctx, reqClone.(*ReqUpdateRank))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}
func (c *_RankServerAsyncNatsClient) DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems, cb func(*CommonRsp, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.DeleteRankMems(ctx, reqClone.(*ReqDeleteRankMems))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}
func (c *_RankServerAsyncNatsClient) DeleteRank(ctx context.Context, req *ReqDeleteRankMems, cb func(*CommonRsp, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.DeleteRank(ctx, reqClone.(*ReqDeleteRankMems))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}

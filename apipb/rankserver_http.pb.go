// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package apipb

import (
	context "context"
	async "github.com/liuwangchen/toy/pkg/async"
	middleware "github.com/liuwangchen/toy/transport/middleware"
	httprpc "github.com/liuwangchen/toy/transport/rpc/httprpc"
	binding "github.com/liuwangchen/toy/transport/rpc/httprpc/binding"
	reflect "reflect"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goctopus package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL
var _ = reflect.TypeOf

const _ = httprpc.SupportPackageIsVersion1

var _ = middleware.Chain()
var _ = new(async.Async)

type RankServerHTTPServer interface {
	DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
	DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error)
	GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error)
	GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error)
	UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error)
}

// RankServerHttpServiceWrapper DO NOT USE
type RankServerHttpServiceWrapper struct {
	doer async.IAsync
	s    RankServerHTTPServer
}

// GetRank DO NOT USE
func (s *RankServerHttpServiceWrapper) GetRank(ctx context.Context, req *ReqGetRank) (*RspGetRank, error) {
	temp, err := s.doer.Do(ctx, func() (interface{}, error) {
		return s.s.GetRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*RspGetRank), err
}

// GetRankByOffset DO NOT USE
func (s *RankServerHttpServiceWrapper) GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset) (*RspGetRank, error) {
	temp, err := s.doer.Do(ctx, func() (interface{}, error) {
		return s.s.GetRankByOffset(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*RspGetRank), err
}

// UpdateRank DO NOT USE
func (s *RankServerHttpServiceWrapper) UpdateRank(ctx context.Context, req *ReqUpdateRank) (*CommonRsp, error) {
	temp, err := s.doer.Do(ctx, func() (interface{}, error) {
		return s.s.UpdateRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

// DeleteRankMems DO NOT USE
func (s *RankServerHttpServiceWrapper) DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	temp, err := s.doer.Do(ctx, func() (interface{}, error) {
		return s.s.DeleteRankMems(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

// DeleteRank DO NOT USE
func (s *RankServerHttpServiceWrapper) DeleteRank(ctx context.Context, req *ReqDeleteRankMems) (*CommonRsp, error) {
	temp, err := s.doer.Do(ctx, func() (interface{}, error) {
		return s.s.DeleteRank(ctx, req)
	})
	if temp == nil {
		return nil, err
	}
	return temp.(*CommonRsp), err
}

func RegisterAsyncRankServerHTTPServer(conn *httprpc.ServerConn, doer async.IAsync, srv RankServerHTTPServer, opts ...httprpc.ServiceOption) {
	r := conn.Route("/")
	opt := new(httprpc.ServiceOpt)
	for _, o := range opts {
		o(opt)
	}
	ss := &RankServerHttpServiceWrapper{
		doer: doer,
		s:    srv,
	}
	r.POST("/rankserver.RankServer/GetRank", _RankServer_GetRank0_HTTP_Handler(ss, opt))
	r.POST("/rankserver.RankServer/GetRankByOffset", _RankServer_GetRankByOffset0_HTTP_Handler(ss, opt))
	r.POST("/rankserver.RankServer/UpdateRank", _RankServer_UpdateRank0_HTTP_Handler(ss, opt))
	r.POST("/rankserver.RankServer/DeleteRankMems", _RankServer_DeleteRankMems0_HTTP_Handler(ss, opt))
	r.POST("/rankserver.RankServer/DeleteRank", _RankServer_DeleteRank0_HTTP_Handler(ss, opt))
}

func _RankServer_GetRank0_HTTP_Handler(srv *RankServerHttpServiceWrapper, opt *httprpc.ServiceOpt) func(ctx httprpc.Context) error {
	return func(ctx httprpc.Context) error {
		var in ReqGetRank
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		httprpc.SetOperation(ctx, "/rankserver.RankServer/GetRank")
		h := ctx.Middleware(middleware.Chain(opt.Mw...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRank(ctx, req.(*ReqGetRank))
		}))
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RspGetRank)
		return ctx.Result(200, reply)
	}
}

func _RankServer_GetRankByOffset0_HTTP_Handler(srv *RankServerHttpServiceWrapper, opt *httprpc.ServiceOpt) func(ctx httprpc.Context) error {
	return func(ctx httprpc.Context) error {
		var in ReqGetRankByOffset
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		httprpc.SetOperation(ctx, "/rankserver.RankServer/GetRankByOffset")
		h := ctx.Middleware(middleware.Chain(opt.Mw...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRankByOffset(ctx, req.(*ReqGetRankByOffset))
		}))
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RspGetRank)
		return ctx.Result(200, reply)
	}
}

func _RankServer_UpdateRank0_HTTP_Handler(srv *RankServerHttpServiceWrapper, opt *httprpc.ServiceOpt) func(ctx httprpc.Context) error {
	return func(ctx httprpc.Context) error {
		var in ReqUpdateRank
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		httprpc.SetOperation(ctx, "/rankserver.RankServer/UpdateRank")
		h := ctx.Middleware(middleware.Chain(opt.Mw...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRank(ctx, req.(*ReqUpdateRank))
		}))
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonRsp)
		return ctx.Result(200, reply)
	}
}

func _RankServer_DeleteRankMems0_HTTP_Handler(srv *RankServerHttpServiceWrapper, opt *httprpc.ServiceOpt) func(ctx httprpc.Context) error {
	return func(ctx httprpc.Context) error {
		var in ReqDeleteRankMems
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		httprpc.SetOperation(ctx, "/rankserver.RankServer/DeleteRankMems")
		h := ctx.Middleware(middleware.Chain(opt.Mw...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRankMems(ctx, req.(*ReqDeleteRankMems))
		}))
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonRsp)
		return ctx.Result(200, reply)
	}
}

func _RankServer_DeleteRank0_HTTP_Handler(srv *RankServerHttpServiceWrapper, opt *httprpc.ServiceOpt) func(ctx httprpc.Context) error {
	return func(ctx httprpc.Context) error {
		var in ReqDeleteRankMems
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		httprpc.SetOperation(ctx, "/rankserver.RankServer/DeleteRank")
		h := ctx.Middleware(middleware.Chain(opt.Mw...)(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRank(ctx, req.(*ReqDeleteRankMems))
		}))
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonRsp)
		return ctx.Result(200, reply)
	}
}

type RankServerHTTPClient interface {
	DeleteRank(ctx context.Context, req *ReqDeleteRankMems, opts ...httprpc.CallOption) (rsp *CommonRsp, err error)
	DeleteRankMems(ctx context.Context, req *ReqDeleteRankMems, opts ...httprpc.CallOption) (rsp *CommonRsp, err error)
	GetRank(ctx context.Context, req *ReqGetRank, opts ...httprpc.CallOption) (rsp *RspGetRank, err error)
	GetRankByOffset(ctx context.Context, req *ReqGetRankByOffset, opts ...httprpc.CallOption) (rsp *RspGetRank, err error)
	UpdateRank(ctx context.Context, req *ReqUpdateRank, opts ...httprpc.CallOption) (rsp *CommonRsp, err error)
}

type RankServerHTTPClientImpl struct {
	cc *httprpc.ClientConn
}

func NewRankServerHTTPClient(conn *httprpc.ClientConn) RankServerHTTPClient {
	return &RankServerHTTPClientImpl{conn}
}

func (c *RankServerHTTPClientImpl) DeleteRank(ctx context.Context, in *ReqDeleteRankMems, opts ...httprpc.CallOption) (*CommonRsp, error) {
	var out CommonRsp
	pattern := "/rankserver.RankServer/DeleteRank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, httprpc.Operation("/rankserver.RankServer/DeleteRank"))
	opts = append(opts, httprpc.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RankServerHTTPClientImpl) DeleteRankMems(ctx context.Context, in *ReqDeleteRankMems, opts ...httprpc.CallOption) (*CommonRsp, error) {
	var out CommonRsp
	pattern := "/rankserver.RankServer/DeleteRankMems"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, httprpc.Operation("/rankserver.RankServer/DeleteRankMems"))
	opts = append(opts, httprpc.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RankServerHTTPClientImpl) GetRank(ctx context.Context, in *ReqGetRank, opts ...httprpc.CallOption) (*RspGetRank, error) {
	var out RspGetRank
	pattern := "/rankserver.RankServer/GetRank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, httprpc.Operation("/rankserver.RankServer/GetRank"))
	opts = append(opts, httprpc.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RankServerHTTPClientImpl) GetRankByOffset(ctx context.Context, in *ReqGetRankByOffset, opts ...httprpc.CallOption) (*RspGetRank, error) {
	var out RspGetRank
	pattern := "/rankserver.RankServer/GetRankByOffset"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, httprpc.Operation("/rankserver.RankServer/GetRankByOffset"))
	opts = append(opts, httprpc.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RankServerHTTPClientImpl) UpdateRank(ctx context.Context, in *ReqUpdateRank, opts ...httprpc.CallOption) (*CommonRsp, error) {
	var out CommonRsp
	pattern := "/rankserver.RankServer/UpdateRank"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, httprpc.Operation("/rankserver.RankServer/UpdateRank"))
	opts = append(opts, httprpc.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

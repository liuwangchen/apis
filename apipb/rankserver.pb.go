// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: rankserver/rankserver.proto

package apipb

import (
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/liuwangchen/toy/transport/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 排行榜返回item
type RankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`        // 各种id：玩家id，联盟id，服务器id等等
	Score int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"` // 积分
	Rank  uint32 `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	Then  int64  `protobuf:"varint,4,opt,name=then,proto3" json:"then,omitempty"` // 二级排序值
}

func (x *RankItem) Reset() {
	*x = RankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankItem) ProtoMessage() {}

func (x *RankItem) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankItem.ProtoReflect.Descriptor instead.
func (*RankItem) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{0}
}

func (x *RankItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RankItem) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RankItem) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankItem) GetThen() int64 {
	if x != nil {
		return x.Then
	}
	return 0
}

// 请求排行榜
type ReqGetRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType  int32  `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"`   // 请求的排行榜类型
	BeginRank uint32 `protobuf:"varint,2,opt,name=beginRank,proto3" json:"beginRank,omitempty"` // 排行榜初始名次
	Count     uint32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`         // 数量
	Me        string `protobuf:"bytes,4,opt,name=me,proto3" json:"me,omitempty"`
	Reverse   bool   `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"` // 是否反转
}

func (x *ReqGetRank) Reset() {
	*x = ReqGetRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetRank) ProtoMessage() {}

func (x *ReqGetRank) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetRank.ProtoReflect.Descriptor instead.
func (*ReqGetRank) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{1}
}

func (x *ReqGetRank) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ReqGetRank) GetBeginRank() uint32 {
	if x != nil {
		return x.BeginRank
	}
	return 0
}

func (x *ReqGetRank) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ReqGetRank) GetMe() string {
	if x != nil {
		return x.Me
	}
	return ""
}

func (x *ReqGetRank) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// 请求排行榜，请求me前后offset名次的数据
type ReqGetRankByOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType int32  `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"` // 请求的排行榜类型
	Me       string `protobuf:"bytes,2,opt,name=me,proto3" json:"me,omitempty"`
	Offset   int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`   // 偏移
	Reverse  bool   `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"` // 是否反转
}

func (x *ReqGetRankByOffset) Reset() {
	*x = ReqGetRankByOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetRankByOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetRankByOffset) ProtoMessage() {}

func (x *ReqGetRankByOffset) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetRankByOffset.ProtoReflect.Descriptor instead.
func (*ReqGetRankByOffset) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{2}
}

func (x *ReqGetRankByOffset) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ReqGetRankByOffset) GetMe() string {
	if x != nil {
		return x.Me
	}
	return ""
}

func (x *ReqGetRankByOffset) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReqGetRankByOffset) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type RspGetRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code         RET         `protobuf:"varint,1,opt,name=code,proto3,enum=ret.RET" json:"code,omitempty"`
	Ranks        []*RankItem `protobuf:"bytes,2,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Me           *RankItem   `protobuf:"bytes,3,opt,name=me,proto3" json:"me,omitempty"`                      // meUid>0时候返回
	Top          *RankItem   `protobuf:"bytes,4,opt,name=top,proto3" json:"top,omitempty"`                    // withTop1=true时候返回
	TotalRankNum uint32      `protobuf:"varint,5,opt,name=totalRankNum,proto3" json:"totalRankNum,omitempty"` // 总上榜人数
}

func (x *RspGetRank) Reset() {
	*x = RspGetRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspGetRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspGetRank) ProtoMessage() {}

func (x *RspGetRank) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspGetRank.ProtoReflect.Descriptor instead.
func (*RspGetRank) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{3}
}

func (x *RspGetRank) GetCode() RET {
	if x != nil {
		return x.Code
	}
	return RET_OK
}

func (x *RspGetRank) GetRanks() []*RankItem {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *RspGetRank) GetMe() *RankItem {
	if x != nil {
		return x.Me
	}
	return nil
}

func (x *RspGetRank) GetTop() *RankItem {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *RspGetRank) GetTotalRankNum() uint32 {
	if x != nil {
		return x.TotalRankNum
	}
	return 0
}

type RankChangeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int64 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Then  int64 `protobuf:"varint,2,opt,name=then,proto3" json:"then,omitempty"`
}

func (x *RankChangeData) Reset() {
	*x = RankChangeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankChangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankChangeData) ProtoMessage() {}

func (x *RankChangeData) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankChangeData.ProtoReflect.Descriptor instead.
func (*RankChangeData) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{4}
}

func (x *RankChangeData) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *RankChangeData) GetThen() int64 {
	if x != nil {
		return x.Then
	}
	return 0
}

// 更新排行榜，替换形式
type ReqUpdateRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType int32                      `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"`                                                                                        // 排行榜类型
	RankData map[string]*RankChangeData `protobuf:"bytes,2,rep,name=rankData,proto3" json:"rankData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 更新的数据，id -> score，增量的
}

func (x *ReqUpdateRank) Reset() {
	*x = ReqUpdateRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateRank) ProtoMessage() {}

func (x *ReqUpdateRank) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateRank.ProtoReflect.Descriptor instead.
func (*ReqUpdateRank) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{5}
}

func (x *ReqUpdateRank) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ReqUpdateRank) GetRankData() map[string]*RankChangeData {
	if x != nil {
		return x.RankData
	}
	return nil
}

type ReqDeleteRankMems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType int32    `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"` // 排行榜类型
	Mems     []string `protobuf:"bytes,2,rep,name=mems,proto3" json:"mems,omitempty"`          // 要删除的成员
}

func (x *ReqDeleteRankMems) Reset() {
	*x = ReqDeleteRankMems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteRankMems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteRankMems) ProtoMessage() {}

func (x *ReqDeleteRankMems) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteRankMems.ProtoReflect.Descriptor instead.
func (*ReqDeleteRankMems) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{6}
}

func (x *ReqDeleteRankMems) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

func (x *ReqDeleteRankMems) GetMems() []string {
	if x != nil {
		return x.Mems
	}
	return nil
}

type ReqDeleteRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankType int32 `protobuf:"varint,1,opt,name=rankType,proto3" json:"rankType,omitempty"` // 排行榜类型
}

func (x *ReqDeleteRank) Reset() {
	*x = ReqDeleteRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqDeleteRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqDeleteRank) ProtoMessage() {}

func (x *ReqDeleteRank) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqDeleteRank.ProtoReflect.Descriptor instead.
func (*ReqDeleteRank) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{7}
}

func (x *ReqDeleteRank) GetRankType() int32 {
	if x != nil {
		return x.RankType
	}
	return 0
}

type CommonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code RET `protobuf:"varint,1,opt,name=code,proto3,enum=ret.RET" json:"code,omitempty"`
}

func (x *CommonRsp) Reset() {
	*x = CommonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rankserver_rankserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRsp) ProtoMessage() {}

func (x *CommonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_rankserver_rankserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRsp.ProtoReflect.Descriptor instead.
func (*CommonRsp) Descriptor() ([]byte, []int) {
	return file_rankserver_rankserver_proto_rawDescGZIP(), []int{8}
}

func (x *CommonRsp) GetCode() RET {
	if x != nil {
		return x.Code
	}
	return RET_OK
}

var File_rankserver_rankserver_proto protoreflect.FileDescriptor

var file_rankserver_rankserver_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x61, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x72, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x22, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x42,
	0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x08, 0x2e, 0x72, 0x65, 0x74, 0x2e, 0x52, 0x45, 0x54, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x24,
	0x0a, 0x02, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x6e,
	0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x02, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d,
	0x22, 0x3a, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x22, 0xc9, 0x01, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x57, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x73, 0x22, 0x2b, 0x0a,
	0x0d, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x29, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x72, 0x65, 0x74, 0x2e, 0x52, 0x45, 0x54, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x32, 0xee, 0x02, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x16, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x71, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x1a, 0x16, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x72,
	0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65,
	0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x6d,
	0x73, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x6d, 0x73, 0x1a, 0x15, 0x2e, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x1a, 0x04, 0xc8, 0x8d, 0x03, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x75, 0x77, 0x61, 0x6e, 0x67, 0x63, 0x68, 0x65, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_rankserver_rankserver_proto_rawDescOnce sync.Once
	file_rankserver_rankserver_proto_rawDescData = file_rankserver_rankserver_proto_rawDesc
)

func file_rankserver_rankserver_proto_rawDescGZIP() []byte {
	file_rankserver_rankserver_proto_rawDescOnce.Do(func() {
		file_rankserver_rankserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_rankserver_rankserver_proto_rawDescData)
	})
	return file_rankserver_rankserver_proto_rawDescData
}

var file_rankserver_rankserver_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_rankserver_rankserver_proto_goTypes = []interface{}{
	(*RankItem)(nil),           // 0: rankserver.RankItem
	(*ReqGetRank)(nil),         // 1: rankserver.ReqGetRank
	(*ReqGetRankByOffset)(nil), // 2: rankserver.ReqGetRankByOffset
	(*RspGetRank)(nil),         // 3: rankserver.RspGetRank
	(*RankChangeData)(nil),     // 4: rankserver.RankChangeData
	(*ReqUpdateRank)(nil),      // 5: rankserver.ReqUpdateRank
	(*ReqDeleteRankMems)(nil),  // 6: rankserver.ReqDeleteRankMems
	(*ReqDeleteRank)(nil),      // 7: rankserver.ReqDeleteRank
	(*CommonRsp)(nil),          // 8: rankserver.CommonRsp
	nil,                        // 9: rankserver.ReqUpdateRank.RankDataEntry
	(RET)(0),                   // 10: ret.RET
}
var file_rankserver_rankserver_proto_depIdxs = []int32{
	10, // 0: rankserver.RspGetRank.code:type_name -> ret.RET
	0,  // 1: rankserver.RspGetRank.ranks:type_name -> rankserver.RankItem
	0,  // 2: rankserver.RspGetRank.me:type_name -> rankserver.RankItem
	0,  // 3: rankserver.RspGetRank.top:type_name -> rankserver.RankItem
	9,  // 4: rankserver.ReqUpdateRank.rankData:type_name -> rankserver.ReqUpdateRank.RankDataEntry
	10, // 5: rankserver.CommonRsp.code:type_name -> ret.RET
	4,  // 6: rankserver.ReqUpdateRank.RankDataEntry.value:type_name -> rankserver.RankChangeData
	1,  // 7: rankserver.RankServer.GetRank:input_type -> rankserver.ReqGetRank
	2,  // 8: rankserver.RankServer.GetRankByOffset:input_type -> rankserver.ReqGetRankByOffset
	5,  // 9: rankserver.RankServer.UpdateRank:input_type -> rankserver.ReqUpdateRank
	6,  // 10: rankserver.RankServer.DeleteRankMems:input_type -> rankserver.ReqDeleteRankMems
	6,  // 11: rankserver.RankServer.DeleteRank:input_type -> rankserver.ReqDeleteRankMems
	3,  // 12: rankserver.RankServer.GetRank:output_type -> rankserver.RspGetRank
	3,  // 13: rankserver.RankServer.GetRankByOffset:output_type -> rankserver.RspGetRank
	8,  // 14: rankserver.RankServer.UpdateRank:output_type -> rankserver.CommonRsp
	8,  // 15: rankserver.RankServer.DeleteRankMems:output_type -> rankserver.CommonRsp
	8,  // 16: rankserver.RankServer.DeleteRank:output_type -> rankserver.CommonRsp
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_rankserver_rankserver_proto_init() }
func file_rankserver_rankserver_proto_init() {
	if File_rankserver_rankserver_proto != nil {
		return
	}
	file_ret_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rankserver_rankserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetRankByOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspGetRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankChangeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteRankMems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqDeleteRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rankserver_rankserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rankserver_rankserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rankserver_rankserver_proto_goTypes,
		DependencyIndexes: file_rankserver_rankserver_proto_depIdxs,
		MessageInfos:      file_rankserver_rankserver_proto_msgTypes,
	}.Build()
	File_rankserver_rankserver_proto = out.File
	file_rankserver_rankserver_proto_rawDesc = nil
	file_rankserver_rankserver_proto_goTypes = nil
	file_rankserver_rankserver_proto_depIdxs = nil
}
